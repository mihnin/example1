name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: sales-analytics-app
  PYTHON_VERSION: 3.13

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Testing
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 psutil

    - name: 🔍 Lint with flake8
      run: |
        flake8 streamlit_app.py --max-line-length=100 --ignore=E501,W503 --statistics
      continue-on-error: true

    - name: 🧪 Run unit tests
      run: |
        python -m pytest tests/test_analysis_functions.py -v --tb=short

    - name: 🔗 Run integration tests
      run: |
        python -m pytest tests/test_streamlit_integration.py -v --tb=short
      continue-on-error: true

    - name: 🏗️ Run code quality tests
      run: |
        python -m pytest tests/test_code_quality.py -v --tb=short

    - name: 📊 Run tests with coverage
      run: |
        python -m pytest tests/ --cov=streamlit_app --cov-report=xml --cov-report=term-missing
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: test
    if: success()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image (test only)
      if: github.ref != 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.DOCKER_IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔑 Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 📝 Extract metadata
      if: github.ref == 'refs/heads/main'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest

    - name: 🏗️ Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🎉 Deployment success
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "🐳 Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "📅 Deploy time: $(date)"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "✅ Production deployment completed"
        echo "Docker image available on Docker Hub"

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notifications
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: 📊 Results report
      run: |
        echo "=== CI/CD PIPELINE REPORT ==="
        echo "Testing: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Deploy: ${{ needs.deploy.result }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
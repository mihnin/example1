name: CI/CD Pipeline

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
on:
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ push –≤ main –≤–µ—Ç–∫—É (–¥–ª—è production –¥–µ–ø–ª–æ—è)
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ pull request –≤ main –≤–µ—Ç–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env:
  DOCKER_IMAGE_NAME: sales-analytics-app
  PYTHON_VERSION: 3.13

jobs:
  # –≠—Ç–∞–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  test:
    runs-on: ubuntu-latest
    name: üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4

    - name: üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (Flake8)
      run: |
        flake8 streamlit_app.py --max-line-length=100 --ignore=E501,W503 --statistics
      continue-on-error: true

    - name: üß™ –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
      run: |
        python -m pytest tests/test_analysis_functions.py -v --tb=short

    - name: üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      run: |
        python -m pytest tests/test_streamlit_integration.py -v --tb=short
      continue-on-error: true

    - name: üèóÔ∏è –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
      run: |
        python -m pytest tests/test_code_quality.py -v --tb=short

    - name: üìä –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
      run: |
        python -m pytest tests/ --cov=streamlit_app --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: üìà –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  # –≠—Ç–∞–ø —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞
  build:
    runs-on: ubuntu-latest
    name: üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
    needs: test
    if: success()
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4

    - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ push Docker –æ–±—Ä–∞–∑–∞
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –æ–±—Ä–∞–∑–∞
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # –≠—Ç–∞–ø –¥–µ–ø–ª–æ—è (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    runs-on: ubuntu-latest
    name: üöÄ –î–µ–ø–ª–æ–π –≤ production
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4

    - name: üéâ –£—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π
      run: |
        echo "üöÄ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        echo "üê≥ Docker –æ–±—Ä–∞–∑: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "üìÖ –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è: $(date)"
        echo "üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}"

    - name: üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ
      run: |
        echo "‚úÖ Production –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω"
        echo "Docker –æ–±—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Docker Hub"
        echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
        echo "docker run -p 8501:8501 ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
  notify:
    runs-on: ubuntu-latest
    name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: üìä –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      run: |
        echo "=== –û–¢–ß–ï–¢ –û CI/CD PIPELINE ==="
        echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${{ needs.test.result }}"
        echo "–°–±–æ—Ä–∫–∞: ${{ needs.build.result }}"
        echo "–î–µ–ø–ª–æ–π: ${{ needs.deploy.result }}"
        echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
        echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
        echo "–ê–≤—Ç–æ—Ä: ${{ github.actor }}"
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

import subprocess
import sys
import os
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\n{'='*60}")
    print(f"üîß {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    print()
    
    try:
        result = subprocess.run(command, capture_output=True, text=True, cwd=Path(__file__).parent.parent)
        
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {result.returncode})")
        
        return result.returncode == 0
        
    except FileNotFoundError:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {command[0]}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
    try:
        import pytest
        print(f"‚úÖ pytest –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è {pytest.__version__}")
    except ImportError:
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pytest"])
    
    results = []
    
    # 1. –ë–∞–∑–æ–≤—ã–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
    success = run_command(
        [sys.executable, "-m", "pytest", "tests/test_analysis_functions.py", "-v"],
        "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞"
    )
    results.append(("–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã", success))
    
    # 2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = run_command(
        [sys.executable, "-m", "pytest", "tests/test_streamlit_integration.py", "-v"],
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Streamlit"
    )
    results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", success))
    
    # 3. –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    success = run_command(
        [sys.executable, "-m", "pytest", "tests/test_code_quality.py", "-v"],
        "–¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
    )
    results.append(("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", success))
    
    # 4. –¢–µ—Å—Ç—ã –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    success = run_command(
        [sys.executable, "-m", "pytest", "tests/test_data_samples.py", "-v"],
        "–¢–µ—Å—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"
    )
    results.append(("–û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö", success))
    
    # 5. –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–∏—Å–∫–ª—é—á–∞—è –º–µ–¥–ª–µ–Ω–Ω—ã–µ)
    success = run_command(
        [sys.executable, "-m", "pytest", "tests/", "-v", "-m", "not slow"],
        "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)"
    )
    results.append(("–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã", success))
    
    # 6. –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
    if "--performance" in sys.argv:
        success = run_command(
            [sys.executable, "-m", "pytest", "tests/", "-v", "-m", "performance"],
            "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        )
        results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", success))
    
    # 7. –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
    success = run_command(
        [sys.executable, "-m", "pytest", "tests/", "-v", "--tb=short"],
        "–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"
    )
    results.append(("–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä", success))
    
    # 8. –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞ (–µ—Å–ª–∏ pytest-cov —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    try:
        import pytest_cov
        success = run_command(
            [sys.executable, "-m", "pytest", "tests/", "--cov=streamlit_app", "--cov-report=term-missing"],
            "–¢–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"
        )
        results.append(("–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞", success))
    except ImportError:
        print("‚ÑπÔ∏è  pytest-cov –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    success = run_command(
        [sys.executable, "-m", "py_compile", "streamlit_app.py"],
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
    )
    results.append(("–ö–æ–º–ø–∏–ª—è—Ü–∏—è", success))
    
    # 10. –õ–∏–Ω—Ç–∏–Ω–≥ (–µ—Å–ª–∏ flake8 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    try:
        subprocess.run([sys.executable, "-m", "flake8", "--version"], capture_output=True, check=True)
        success = run_command(
            [sys.executable, "-m", "flake8", "streamlit_app.py", "--max-line-length=100", "--ignore=E501,W503"],
            "–õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞ (flake8)"
        )
        results.append(("–õ–∏–Ω—Ç–∏–Ω–≥", success))
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ÑπÔ∏è  flake8 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–Ω—Ç–∏–Ω–≥")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    
    total_tests = len(results)
    passed_tests = sum(1 for _, success in results if success)
    failed_tests = total_tests - passed_tests
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name:<25} {status}")
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
    
    if failed_tests == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
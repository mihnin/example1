# -*- coding: utf-8 -*-
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∏–∑ –ø—Ä–∏–º–µ—Ä1.py
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö",
    page_icon="üìä",
    layout="wide"
)

def analyze_sales_data(df):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    results = {}
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∫–∞–∫ –¥–∞—Ç—ã
    if df.columns[0] == 'Unnamed: 0' or '–¥–∞—Ç–∞' in df.columns[0].lower():
        df.iloc[:, 0] = pd.to_datetime(df.iloc[:, 0])
        df = df.set_index(df.columns[0])
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    results['basic_stats'] = df.describe()
    
    # –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    results['total_sales_per_product'] = df.sum()
    
    # –û–±—â–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
    results['total_monthly_sales'] = df.sum(axis=1)
    
    # –°—Ä–µ–¥–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    results['average_monthly_sales_per_product'] = df.mean()
    
    # –ú–µ—Å—è—Ü —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
    results['month_highest_sales'] = results['total_monthly_sales'].idxmax()
    
    # –ü—Ä–æ–¥—É–∫—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –æ–±—â–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
    results['product_highest_sales'] = results['total_sales_per_product'].idxmax()
    
    return results, df

def create_visualizations(df, results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–∏—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
    fig1, ax1 = plt.subplots(figsize=(12, 6))
    ax1.plot(results['total_monthly_sales'].index, results['total_monthly_sales'].values, marker='o')
    ax1.set_title('–û–±—â–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏', fontsize=16, fontweight='bold')
    ax1.set_xlabel('–î–∞—Ç–∞')
    ax1.set_ylabel('–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏')
    ax1.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    bars = ax2.bar(results['total_sales_per_product'].index, results['total_sales_per_product'].values, color='skyblue')
    ax2.set_title('–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º', fontsize=16, fontweight='bold')
    ax2.set_xlabel('–ü—Ä–æ–¥—É–∫—Ç')
    ax2.set_ylabel('–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏')
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height):,}',
                ha='center', va='bottom')
    
    plt.tight_layout()
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    fig3, ax3 = plt.subplots(figsize=(8, 6))
    correlation_matrix = df.corr()
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, ax=ax3)
    ax3.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏', fontsize=16, fontweight='bold')
    plt.tight_layout()
    
    return fig1, fig2, fig3

def main():
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if st.sidebar.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö"):
        try:
            example_df = pd.read_excel('docs/sample_sales_data.xlsx')
            st.session_state['uploaded_data'] = example_df
            st.sidebar.success("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except FileNotFoundError:
            st.sidebar.error("–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ docs/")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
        type=['xlsx', 'xls'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            st.session_state['uploaded_data'] = df
            st.sidebar.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    if 'uploaded_data' in st.session_state:
        df = st.session_state['uploaded_data']
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö
        st.header("1. üìã –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", df.shape[0])
        with col2:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤", df.shape[1])
        with col3:
            st.metric("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", df.isnull().sum().sum())
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        st.subheader("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.head())
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö:")
        buffer = io.StringIO()
        df.info(buf=buffer)
        info_str = buffer.getvalue()
        st.text(info_str)
        
        # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        try:
            results, processed_df = analyze_sales_data(df.copy())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            st.header("2. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            st.dataframe(results['basic_stats'])
            
            # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            st.header("3. üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:")
                st.dataframe(results['total_sales_per_product'])
                
                st.subheader("–°—Ä–µ–¥–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏:")
                st.dataframe(results['average_monthly_sales_per_product'])
            
            with col2:
                st.subheader("–¢–æ–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
                st.write(f"**–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏:** {results['product_highest_sales']}")
                if hasattr(results['month_highest_sales'], 'strftime'):
                    st.write(f"**–ú–µ—Å—è—Ü —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏:** {results['month_highest_sales'].strftime('%Y-%m-%d')}")
                else:
                    st.write(f"**–ü–µ—Ä–∏–æ–¥ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏:** {results['month_highest_sales']}")
                
                # –¢–æ–ø 3 –ø—Ä–æ–¥—É–∫—Ç–∞
                top_products = results['total_sales_per_product'].nlargest(3)
                st.subheader("–¢–æ–ø 3 –ø—Ä–æ–¥—É–∫—Ç–∞:")
                for i, (product, sales) in enumerate(top_products.items(), 1):
                    st.write(f"{i}. {product}: {sales:,.0f}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            st.header("4. üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            try:
                fig1, fig2, fig3 = create_visualizations(processed_df, results)
                
                # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
                st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂:")
                st.pyplot(fig1)
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
                st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
                st.pyplot(fig2)
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
                st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏:")
                st.pyplot(fig3)
                
                plt.close('all')  # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            
            # –û—Ç—á–µ—Ç
            st.header("5. üìù –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç")
            
            report = f"""
            ## –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            
            ### –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
            - **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {df.shape[0]}
            - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:** {df.shape[1] - 1}
            - **–õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç:** {results['product_highest_sales']} 
              (–æ–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {results['total_sales_per_product'][results['product_highest_sales']]:,.0f})
            - **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:** {results['total_monthly_sales'].mean():,.0f}
            - **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü:** {results['total_monthly_sales'].max():,.0f}
            - **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü:** {results['total_monthly_sales'].min():,.0f}
            
            ### –í—ã–≤–æ–¥—ã:
            - –ü—Ä–æ–¥–∞–∂–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç {'–≤–æ—Å—Ö–æ–¥—è—â–∏–π' if results['total_monthly_sales'].iloc[-1] > results['total_monthly_sales'].iloc[0] else '–Ω–∏—Å—Ö–æ–¥—è—â–∏–π'} —Ç—Ä–µ–Ω–¥
            - –ù–∞–∏–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {processed_df.corr().values[processed_df.corr().values != 1].max():.3f}
            - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂: {results['total_monthly_sales'].std():,.0f}
            
            ### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
            - **pandas**: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            - **matplotlib**: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            - **seaborn**: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            - **streamlit**: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            """
            
            st.markdown(report)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (TXT)",
                data=report,
                file_name=f"sales_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    
    else:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        example_structure = pd.DataFrame({
            '–î–∞—Ç–∞': ['2020-01-01', '2020-02-01', '2020-03-01'],
            '–ü—Ä–æ–¥—É–∫—Ç_1': [1000, 1200, 1100],
            '–ü—Ä–æ–¥—É–∫—Ç_2': [1500, 1300, 1400],
            '–ü—Ä–æ–¥—É–∫—Ç_3': [800, 900, 850]
        })
        st.dataframe(example_structure)

if __name__ == "__main__":
    main()
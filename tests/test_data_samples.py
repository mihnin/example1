# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import pytest
import pandas as pd
import numpy as np
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from streamlit_app import analyze_sales_data


@pytest.mark.unit
class TestDataSamples:
    """–¢–µ—Å—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_with_sample_sales_data(self, sample_sales_data):
        """–¢–µ—Å—Ç —Å –æ–±—Ä–∞–∑—Ü–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
        results, processed_df = analyze_sales_data(sample_sales_data.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert 'total_sales_per_product' in results
        assert 'average_monthly_sales_per_product' in results
        assert 'product_highest_sales' in results
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert len(processed_df) == 12  # 12 –º–µ—Å—è—Ü–µ–≤
        assert len(processed_df.columns) == 3  # 3 –ø—Ä–æ–¥—É–∫—Ç–∞
        assert pd.api.types.is_datetime64_any_dtype(processed_df.index)
    
    def test_with_minimal_data(self, minimal_data):
        """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        results, processed_df = analyze_sales_data(minimal_data.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        assert 'basic_stats' in results
        assert len(results['total_sales_per_product']) == 2
        assert len(processed_df) == 2
    
    def test_with_nan_data(self, data_with_nan):
        """–¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ NaN"""
        results, processed_df = analyze_sales_data(data_with_nan.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É NaN –∑–Ω–∞—á–µ–Ω–∏–π
        assert 'basic_stats' in results
        stats = results['basic_stats']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NaN –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Ä–∞—Å—á–µ—Ç–æ–≤
        assert stats.loc['count', '–ü—Ä–æ–¥—É–∫—Ç_1'] == 3  # 2 NaN –∏–∑ 5 –∑–Ω–∞—á–µ–Ω–∏–π
        assert stats.loc['count', '–ü—Ä–æ–¥—É–∫—Ç_2'] == 4  # 1 NaN –∏–∑ 5 –∑–Ω–∞—á–µ–Ω–∏–π
        assert stats.loc['count', '–ü—Ä–æ–¥—É–∫—Ç_3'] == 4  # 1 NaN –∏–∑ 5 –∑–Ω–∞—á–µ–Ω–∏–π
    
    def test_with_corrupted_data(self, corrupted_data):
        """–¢–µ—Å—Ç —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ª–∏–±–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—à–∏–±–∫—É, –ª–∏–±–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        try:
            results, processed_df = analyze_sales_data(corrupted_data.copy())
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert results is not None
        except Exception:
            # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            pass
    
    def test_with_mixed_data_types(self, mixed_data_types):
        """–¢–µ—Å—Ç —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            results, processed_df = analyze_sales_data(mixed_data_types.copy())
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
            assert results is not None
            assert len(processed_df) == 3
        except Exception:
            # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–º
            pass
    
    @pytest.mark.slow
    @pytest.mark.performance
    def test_with_large_dataset(self, large_dataset):
        """–¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        import time
        
        start_time = time.time()
        results, processed_df = analyze_sales_data(large_dataset.copy())
        execution_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        assert execution_time < 5.0, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {execution_time:.2f}—Å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert len(processed_df) == 500
        assert len(processed_df.columns) == 5
        assert results['total_sales_per_product'].sum() > 0
    
    def test_empty_dataframe(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º DataFrame"""
        empty_df = pd.DataFrame()
        
        with pytest.raises(Exception):
            analyze_sales_data(empty_df)
    
    def test_single_column_data(self):
        """–¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        single_col_df = pd.DataFrame({'OnlyColumn': [1, 2, 3, 4, 5]})
        
        results, processed_df = analyze_sales_data(single_col_df.copy())
        
        assert len(results['total_sales_per_product']) == 1
        assert results['total_sales_per_product']['OnlyColumn'] == 15
    
    def test_single_row_data(self):
        """–¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        single_row_df = pd.DataFrame({
            '–ü—Ä–æ–¥—É–∫—Ç_A': [100],
            '–ü—Ä–æ–¥—É–∫—Ç_B': [200],
            '–ü—Ä–æ–¥—É–∫—Ç_C': [300]
        })
        
        results, processed_df = analyze_sales_data(single_row_df.copy())
        
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_A'] == 100
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_B'] == 200
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_C'] == 300
        assert results['product_highest_sales'] == '–ü—Ä–æ–¥—É–∫—Ç_C'
    
    def test_zero_values(self):
        """–¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        zero_df = pd.DataFrame({
            '–î–∞—Ç–∞': pd.date_range('2020-01-01', periods=3, freq='MS'),
            '–ü—Ä–æ–¥—É–∫—Ç_1': [0, 100, 0],
            '–ü—Ä–æ–¥—É–∫—Ç_2': [0, 0, 200],
            '–ü—Ä–æ–¥—É–∫—Ç_3': [50, 0, 0]
        })
        
        results, processed_df = analyze_sales_data(zero_df.copy())
        
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_1'] == 100
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_2'] == 200
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_3'] == 50
    
    def test_negative_values(self):
        """–¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        negative_df = pd.DataFrame({
            '–î–∞—Ç–∞': pd.date_range('2020-01-01', periods=3, freq='MS'),
            '–ü—Ä–æ–¥—É–∫—Ç_1': [-100, 200, -50],
            '–ü—Ä–æ–¥—É–∫—Ç_2': [100, -150, 300],
            '–ü—Ä–æ–¥—É–∫—Ç_3': [0, 0, 0]
        })
        
        results, processed_df = analyze_sales_data(negative_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_1'] == 50  # -100 + 200 - 50
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_2'] == 250  # 100 - 150 + 300
        assert results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_3'] == 0
    
    def test_very_large_numbers(self):
        """–¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏"""
        large_numbers_df = pd.DataFrame({
            '–î–∞—Ç–∞': pd.date_range('2020-01-01', periods=2, freq='MS'),
            '–ë–æ–ª—å—à–æ–π_–ü—Ä–æ–¥—É–∫—Ç': [1e9, 2e9],  # –ú–∏–ª–ª–∏–∞—Ä–¥—ã
            '–û—á–µ–Ω—å_–ë–æ–ª—å—à–æ–π': [1e12, 2e12]   # –¢—Ä–∏–ª–ª–∏–æ–Ω—ã
        })
        
        results, processed_df = analyze_sales_data(large_numbers_df.copy())
        
        assert results['total_sales_per_product']['–ë–æ–ª—å—à–æ–π_–ü—Ä–æ–¥—É–∫—Ç'] == 3e9
        assert results['total_sales_per_product']['–û—á–µ–Ω—å_–ë–æ–ª—å—à–æ–π'] == 3e12
    
    def test_decimal_values(self):
        """–¢–µ—Å—Ç —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        decimal_df = pd.DataFrame({
            '–î–∞—Ç–∞': pd.date_range('2020-01-01', periods=3, freq='MS'),
            '–ü—Ä–æ–¥—É–∫—Ç_1': [100.5, 200.75, 150.25],
            '–ü—Ä–æ–¥—É–∫—Ç_2': [50.33, 75.67, 100.99]
        })
        
        results, processed_df = analyze_sales_data(decimal_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
        expected_total_1 = 100.5 + 200.75 + 150.25
        expected_total_2 = 50.33 + 75.67 + 100.99
        
        assert abs(results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_1'] - expected_total_1) < 0.01
        assert abs(results['total_sales_per_product']['–ü—Ä–æ–¥—É–∫—Ç_2'] - expected_total_2) < 0.01
    
    def test_date_formats(self):
        """–¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç"""
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ
        date_formats_df = pd.DataFrame({
            '–î–∞—Ç–∞': ['2020-01-01', '2020-02-01', '2020-03-01'],
            '–ü—Ä–æ–¥—É–∫—Ç_1': [100, 200, 300]
        })
        
        results, processed_df = analyze_sales_data(date_formats_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã
        assert pd.api.types.is_datetime64_any_dtype(processed_df.index)
        assert len(processed_df) == 3
    
    def test_unicode_column_names(self):
        """–¢–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ Unicode"""
        unicode_df = pd.DataFrame({
            '–î–∞—Ç–∞': pd.date_range('2020-01-01', periods=2, freq='MS'),
            '–ü—Ä–æ–¥—É–∫—Ç_Âè∑Á†Å1': [100, 200],  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            '–ü—Ä–æ–¥—É–∫—Ç_Œ±Œ≤Œ≥': [150, 250],   # –ì—Ä–µ—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            '–ü—Ä–æ–¥—É–∫—Ç_üöÄ': [50, 75]       # –≠–º–æ–¥–∑–∏
        })
        
        results, processed_df = analyze_sales_data(unicode_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Unicode —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert '–ü—Ä–æ–¥—É–∫—Ç_Âè∑Á†Å1' in results['total_sales_per_product']
        assert '–ü—Ä–æ–¥—É–∫—Ç_Œ±Œ≤Œ≥' in results['total_sales_per_product']
        assert '–ü—Ä–æ–¥—É–∫—Ç_üöÄ' in results['total_sales_per_product']


@pytest.mark.integration
class TestRealWorldScenarios:
    """–¢–µ—Å—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞"""
    
    def test_seasonal_data(self):
        """–¢–µ—Å—Ç —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ–∑–æ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        dates = pd.date_range('2020-01-01', periods=24, freq='MS')
        seasonal_pattern = [100 + 50 * np.sin(2 * np.pi * i / 12) for i in range(24)]
        
        seasonal_df = pd.DataFrame({
            '–î–∞—Ç–∞': dates,
            '–°–µ–∑–æ–Ω–Ω—ã–π_–ü—Ä–æ–¥—É–∫—Ç': seasonal_pattern
        })
        
        results, processed_df = analyze_sales_data(seasonal_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∑–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert len(processed_df) == 24
        assert results['total_sales_per_product']['–°–µ–∑–æ–Ω–Ω—ã–π_–ü—Ä–æ–¥—É–∫—Ç'] > 0
    
    def test_growth_trend_data(self):
        """–¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Ç—Ä–µ–Ω–¥–æ–º —Ä–æ—Å—Ç–∞"""
        dates = pd.date_range('2020-01-01', periods=12, freq='MS')
        growth_data = [100 * (1.1 ** i) for i in range(12)]  # 10% —Ä–æ—Å—Ç–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        
        growth_df = pd.DataFrame({
            '–î–∞—Ç–∞': dates,
            '–†–∞—Å—Ç—É—â–∏–π_–ü—Ä–æ–¥—É–∫—Ç': growth_data
        })
        
        results, processed_df = analyze_sales_data(growth_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –æ—Ç—Ä–∞–∂–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö
        first_half_avg = processed_df.iloc[:6]['–†–∞—Å—Ç—É—â–∏–π_–ü—Ä–æ–¥—É–∫—Ç'].mean()
        second_half_avg = processed_df.iloc[6:]['–†–∞—Å—Ç—É—â–∏–π_–ü—Ä–æ–¥—É–∫—Ç'].mean()
        
        assert second_half_avg > first_half_avg, "–¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    
    def test_multiple_products_comparison(self):
        """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        dates = pd.date_range('2020-01-01', periods=12, freq='MS')
        
        multi_product_df = pd.DataFrame({
            '–î–∞—Ç–∞': dates,
            '–õ–∏–¥–µ—Ä_–†—ã–Ω–∫–∞': [1000] * 12,      # –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä
            '–†–∞—Å—Ç—É—â–∏–π_–ò–≥—Ä–æ–∫': list(range(100, 1300, 100)),  # –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç
            '–ü–∞–¥–∞—é—â–∏–π_–ë—Ä–µ–Ω–¥': list(range(1200, 0, -100)),   # –ü–∞–¥–µ–Ω–∏–µ
            '–ù–∏—à–µ–≤—ã–π_–ü—Ä–æ–¥—É–∫—Ç': [200] * 12    # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –Ω–∏—à–∞
        })
        
        results, processed_df = analyze_sales_data(multi_product_df.copy())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–∞
        top_product = results['product_highest_sales']
        assert top_product in ['–õ–∏–¥–µ—Ä_–†—ã–Ω–∫–∞', '–†–∞—Å—Ç—É—â–∏–π_–ò–≥—Ä–æ–∫'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ª–∏–¥–µ—Ä: {top_product}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É—á—Ç–µ–Ω—ã
        assert len(results['total_sales_per_product']) == 4


if __name__ == '__main__':
    pytest.main([__file__, '-v'])